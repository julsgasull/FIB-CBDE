/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package wineinfo.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WineInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 282363771742010620L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WineInfo\",\"namespace\":\"wineinfo.avro\",\"fields\":[{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"region\",\"type\":[\"int\",\"null\"]},{\"name\":\"alc\",\"type\":[\"double\",\"null\"]},{\"name\":\"m_acid\",\"type\":[\"double\",\"null\"]},{\"name\":\"ash\",\"type\":[\"double\",\"null\"]},{\"name\":\"alc_ash\",\"type\":[\"double\",\"null\"]},{\"name\":\"mgn\",\"type\":[\"double\",\"null\"]},{\"name\":\"t_phenols\",\"type\":[\"double\",\"null\"]},{\"name\":\"flav\",\"type\":[\"double\",\"null\"]},{\"name\":\"nonflav_phenols\",\"type\":[\"double\",\"null\"]},{\"name\":\"proant\",\"type\":[\"double\",\"null\"]},{\"name\":\"col\",\"type\":[\"double\",\"null\"]},{\"name\":\"hue\",\"type\":[\"double\",\"null\"]},{\"name\":\"od280od315\",\"type\":[\"double\",\"null\"]},{\"name\":\"proline\",\"type\":[\"double\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WineInfo> ENCODER =
      new BinaryMessageEncoder<WineInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WineInfo> DECODER =
      new BinaryMessageDecoder<WineInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<WineInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<WineInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<WineInfo>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this WineInfo to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a WineInfo from a ByteBuffer. */
  public static WineInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence type;
  @Deprecated public java.lang.Integer region;
  @Deprecated public java.lang.Double alc;
  @Deprecated public java.lang.Double m_acid;
  @Deprecated public java.lang.Double ash;
  @Deprecated public java.lang.Double alc_ash;
  @Deprecated public java.lang.Double mgn;
  @Deprecated public java.lang.Double t_phenols;
  @Deprecated public java.lang.Double flav;
  @Deprecated public java.lang.Double nonflav_phenols;
  @Deprecated public java.lang.Double proant;
  @Deprecated public java.lang.Double col;
  @Deprecated public java.lang.Double hue;
  @Deprecated public java.lang.Double od280od315;
  @Deprecated public java.lang.Double proline;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WineInfo() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param region The new value for region
   * @param alc The new value for alc
   * @param m_acid The new value for m_acid
   * @param ash The new value for ash
   * @param alc_ash The new value for alc_ash
   * @param mgn The new value for mgn
   * @param t_phenols The new value for t_phenols
   * @param flav The new value for flav
   * @param nonflav_phenols The new value for nonflav_phenols
   * @param proant The new value for proant
   * @param col The new value for col
   * @param hue The new value for hue
   * @param od280od315 The new value for od280od315
   * @param proline The new value for proline
   */
  public WineInfo(java.lang.CharSequence type, java.lang.Integer region, java.lang.Double alc, java.lang.Double m_acid, java.lang.Double ash, java.lang.Double alc_ash, java.lang.Double mgn, java.lang.Double t_phenols, java.lang.Double flav, java.lang.Double nonflav_phenols, java.lang.Double proant, java.lang.Double col, java.lang.Double hue, java.lang.Double od280od315, java.lang.Double proline) {
    this.type = type;
    this.region = region;
    this.alc = alc;
    this.m_acid = m_acid;
    this.ash = ash;
    this.alc_ash = alc_ash;
    this.mgn = mgn;
    this.t_phenols = t_phenols;
    this.flav = flav;
    this.nonflav_phenols = nonflav_phenols;
    this.proant = proant;
    this.col = col;
    this.hue = hue;
    this.od280od315 = od280od315;
    this.proline = proline;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return region;
    case 2: return alc;
    case 3: return m_acid;
    case 4: return ash;
    case 5: return alc_ash;
    case 6: return mgn;
    case 7: return t_phenols;
    case 8: return flav;
    case 9: return nonflav_phenols;
    case 10: return proant;
    case 11: return col;
    case 12: return hue;
    case 13: return od280od315;
    case 14: return proline;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.CharSequence)value$; break;
    case 1: region = (java.lang.Integer)value$; break;
    case 2: alc = (java.lang.Double)value$; break;
    case 3: m_acid = (java.lang.Double)value$; break;
    case 4: ash = (java.lang.Double)value$; break;
    case 5: alc_ash = (java.lang.Double)value$; break;
    case 6: mgn = (java.lang.Double)value$; break;
    case 7: t_phenols = (java.lang.Double)value$; break;
    case 8: flav = (java.lang.Double)value$; break;
    case 9: nonflav_phenols = (java.lang.Double)value$; break;
    case 10: proant = (java.lang.Double)value$; break;
    case 11: col = (java.lang.Double)value$; break;
    case 12: hue = (java.lang.Double)value$; break;
    case 13: od280od315 = (java.lang.Double)value$; break;
    case 14: proline = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'region' field.
   * @return The value of the 'region' field.
   */
  public java.lang.Integer getRegion() {
    return region;
  }

  /**
   * Sets the value of the 'region' field.
   * @param value the value to set.
   */
  public void setRegion(java.lang.Integer value) {
    this.region = value;
  }

  /**
   * Gets the value of the 'alc' field.
   * @return The value of the 'alc' field.
   */
  public java.lang.Double getAlc() {
    return alc;
  }

  /**
   * Sets the value of the 'alc' field.
   * @param value the value to set.
   */
  public void setAlc(java.lang.Double value) {
    this.alc = value;
  }

  /**
   * Gets the value of the 'm_acid' field.
   * @return The value of the 'm_acid' field.
   */
  public java.lang.Double getMAcid() {
    return m_acid;
  }

  /**
   * Sets the value of the 'm_acid' field.
   * @param value the value to set.
   */
  public void setMAcid(java.lang.Double value) {
    this.m_acid = value;
  }

  /**
   * Gets the value of the 'ash' field.
   * @return The value of the 'ash' field.
   */
  public java.lang.Double getAsh() {
    return ash;
  }

  /**
   * Sets the value of the 'ash' field.
   * @param value the value to set.
   */
  public void setAsh(java.lang.Double value) {
    this.ash = value;
  }

  /**
   * Gets the value of the 'alc_ash' field.
   * @return The value of the 'alc_ash' field.
   */
  public java.lang.Double getAlcAsh() {
    return alc_ash;
  }

  /**
   * Sets the value of the 'alc_ash' field.
   * @param value the value to set.
   */
  public void setAlcAsh(java.lang.Double value) {
    this.alc_ash = value;
  }

  /**
   * Gets the value of the 'mgn' field.
   * @return The value of the 'mgn' field.
   */
  public java.lang.Double getMgn() {
    return mgn;
  }

  /**
   * Sets the value of the 'mgn' field.
   * @param value the value to set.
   */
  public void setMgn(java.lang.Double value) {
    this.mgn = value;
  }

  /**
   * Gets the value of the 't_phenols' field.
   * @return The value of the 't_phenols' field.
   */
  public java.lang.Double getTPhenols() {
    return t_phenols;
  }

  /**
   * Sets the value of the 't_phenols' field.
   * @param value the value to set.
   */
  public void setTPhenols(java.lang.Double value) {
    this.t_phenols = value;
  }

  /**
   * Gets the value of the 'flav' field.
   * @return The value of the 'flav' field.
   */
  public java.lang.Double getFlav() {
    return flav;
  }

  /**
   * Sets the value of the 'flav' field.
   * @param value the value to set.
   */
  public void setFlav(java.lang.Double value) {
    this.flav = value;
  }

  /**
   * Gets the value of the 'nonflav_phenols' field.
   * @return The value of the 'nonflav_phenols' field.
   */
  public java.lang.Double getNonflavPhenols() {
    return nonflav_phenols;
  }

  /**
   * Sets the value of the 'nonflav_phenols' field.
   * @param value the value to set.
   */
  public void setNonflavPhenols(java.lang.Double value) {
    this.nonflav_phenols = value;
  }

  /**
   * Gets the value of the 'proant' field.
   * @return The value of the 'proant' field.
   */
  public java.lang.Double getProant() {
    return proant;
  }

  /**
   * Sets the value of the 'proant' field.
   * @param value the value to set.
   */
  public void setProant(java.lang.Double value) {
    this.proant = value;
  }

  /**
   * Gets the value of the 'col' field.
   * @return The value of the 'col' field.
   */
  public java.lang.Double getCol() {
    return col;
  }

  /**
   * Sets the value of the 'col' field.
   * @param value the value to set.
   */
  public void setCol(java.lang.Double value) {
    this.col = value;
  }

  /**
   * Gets the value of the 'hue' field.
   * @return The value of the 'hue' field.
   */
  public java.lang.Double getHue() {
    return hue;
  }

  /**
   * Sets the value of the 'hue' field.
   * @param value the value to set.
   */
  public void setHue(java.lang.Double value) {
    this.hue = value;
  }

  /**
   * Gets the value of the 'od280od315' field.
   * @return The value of the 'od280od315' field.
   */
  public java.lang.Double getOd280od315() {
    return od280od315;
  }

  /**
   * Sets the value of the 'od280od315' field.
   * @param value the value to set.
   */
  public void setOd280od315(java.lang.Double value) {
    this.od280od315 = value;
  }

  /**
   * Gets the value of the 'proline' field.
   * @return The value of the 'proline' field.
   */
  public java.lang.Double getProline() {
    return proline;
  }

  /**
   * Sets the value of the 'proline' field.
   * @param value the value to set.
   */
  public void setProline(java.lang.Double value) {
    this.proline = value;
  }

  /**
   * Creates a new WineInfo RecordBuilder.
   * @return A new WineInfo RecordBuilder
   */
  public static wineinfo.avro.WineInfo.Builder newBuilder() {
    return new wineinfo.avro.WineInfo.Builder();
  }

  /**
   * Creates a new WineInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WineInfo RecordBuilder
   */
  public static wineinfo.avro.WineInfo.Builder newBuilder(wineinfo.avro.WineInfo.Builder other) {
    return new wineinfo.avro.WineInfo.Builder(other);
  }

  /**
   * Creates a new WineInfo RecordBuilder by copying an existing WineInfo instance.
   * @param other The existing instance to copy.
   * @return A new WineInfo RecordBuilder
   */
  public static wineinfo.avro.WineInfo.Builder newBuilder(wineinfo.avro.WineInfo other) {
    return new wineinfo.avro.WineInfo.Builder(other);
  }

  /**
   * RecordBuilder for WineInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WineInfo>
    implements org.apache.avro.data.RecordBuilder<WineInfo> {

    private java.lang.CharSequence type;
    private java.lang.Integer region;
    private java.lang.Double alc;
    private java.lang.Double m_acid;
    private java.lang.Double ash;
    private java.lang.Double alc_ash;
    private java.lang.Double mgn;
    private java.lang.Double t_phenols;
    private java.lang.Double flav;
    private java.lang.Double nonflav_phenols;
    private java.lang.Double proant;
    private java.lang.Double col;
    private java.lang.Double hue;
    private java.lang.Double od280od315;
    private java.lang.Double proline;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(wineinfo.avro.WineInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.region)) {
        this.region = data().deepCopy(fields()[1].schema(), other.region);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.alc)) {
        this.alc = data().deepCopy(fields()[2].schema(), other.alc);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.m_acid)) {
        this.m_acid = data().deepCopy(fields()[3].schema(), other.m_acid);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ash)) {
        this.ash = data().deepCopy(fields()[4].schema(), other.ash);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.alc_ash)) {
        this.alc_ash = data().deepCopy(fields()[5].schema(), other.alc_ash);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mgn)) {
        this.mgn = data().deepCopy(fields()[6].schema(), other.mgn);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.t_phenols)) {
        this.t_phenols = data().deepCopy(fields()[7].schema(), other.t_phenols);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.flav)) {
        this.flav = data().deepCopy(fields()[8].schema(), other.flav);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.nonflav_phenols)) {
        this.nonflav_phenols = data().deepCopy(fields()[9].schema(), other.nonflav_phenols);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.proant)) {
        this.proant = data().deepCopy(fields()[10].schema(), other.proant);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.col)) {
        this.col = data().deepCopy(fields()[11].schema(), other.col);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.hue)) {
        this.hue = data().deepCopy(fields()[12].schema(), other.hue);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.od280od315)) {
        this.od280od315 = data().deepCopy(fields()[13].schema(), other.od280od315);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.proline)) {
        this.proline = data().deepCopy(fields()[14].schema(), other.proline);
        fieldSetFlags()[14] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing WineInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(wineinfo.avro.WineInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.region)) {
        this.region = data().deepCopy(fields()[1].schema(), other.region);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.alc)) {
        this.alc = data().deepCopy(fields()[2].schema(), other.alc);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.m_acid)) {
        this.m_acid = data().deepCopy(fields()[3].schema(), other.m_acid);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ash)) {
        this.ash = data().deepCopy(fields()[4].schema(), other.ash);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.alc_ash)) {
        this.alc_ash = data().deepCopy(fields()[5].schema(), other.alc_ash);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mgn)) {
        this.mgn = data().deepCopy(fields()[6].schema(), other.mgn);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.t_phenols)) {
        this.t_phenols = data().deepCopy(fields()[7].schema(), other.t_phenols);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.flav)) {
        this.flav = data().deepCopy(fields()[8].schema(), other.flav);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.nonflav_phenols)) {
        this.nonflav_phenols = data().deepCopy(fields()[9].schema(), other.nonflav_phenols);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.proant)) {
        this.proant = data().deepCopy(fields()[10].schema(), other.proant);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.col)) {
        this.col = data().deepCopy(fields()[11].schema(), other.col);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.hue)) {
        this.hue = data().deepCopy(fields()[12].schema(), other.hue);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.od280od315)) {
        this.od280od315 = data().deepCopy(fields()[13].schema(), other.od280od315);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.proline)) {
        this.proline = data().deepCopy(fields()[14].schema(), other.proline);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'region' field.
      * @return The value.
      */
    public java.lang.Integer getRegion() {
      return region;
    }

    /**
      * Sets the value of the 'region' field.
      * @param value The value of 'region'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setRegion(java.lang.Integer value) {
      validate(fields()[1], value);
      this.region = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'region' field has been set.
      * @return True if the 'region' field has been set, false otherwise.
      */
    public boolean hasRegion() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'region' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearRegion() {
      region = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'alc' field.
      * @return The value.
      */
    public java.lang.Double getAlc() {
      return alc;
    }

    /**
      * Sets the value of the 'alc' field.
      * @param value The value of 'alc'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setAlc(java.lang.Double value) {
      validate(fields()[2], value);
      this.alc = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'alc' field has been set.
      * @return True if the 'alc' field has been set, false otherwise.
      */
    public boolean hasAlc() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'alc' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearAlc() {
      alc = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'm_acid' field.
      * @return The value.
      */
    public java.lang.Double getMAcid() {
      return m_acid;
    }

    /**
      * Sets the value of the 'm_acid' field.
      * @param value The value of 'm_acid'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setMAcid(java.lang.Double value) {
      validate(fields()[3], value);
      this.m_acid = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'm_acid' field has been set.
      * @return True if the 'm_acid' field has been set, false otherwise.
      */
    public boolean hasMAcid() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'm_acid' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearMAcid() {
      m_acid = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'ash' field.
      * @return The value.
      */
    public java.lang.Double getAsh() {
      return ash;
    }

    /**
      * Sets the value of the 'ash' field.
      * @param value The value of 'ash'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setAsh(java.lang.Double value) {
      validate(fields()[4], value);
      this.ash = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'ash' field has been set.
      * @return True if the 'ash' field has been set, false otherwise.
      */
    public boolean hasAsh() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'ash' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearAsh() {
      ash = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'alc_ash' field.
      * @return The value.
      */
    public java.lang.Double getAlcAsh() {
      return alc_ash;
    }

    /**
      * Sets the value of the 'alc_ash' field.
      * @param value The value of 'alc_ash'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setAlcAsh(java.lang.Double value) {
      validate(fields()[5], value);
      this.alc_ash = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'alc_ash' field has been set.
      * @return True if the 'alc_ash' field has been set, false otherwise.
      */
    public boolean hasAlcAsh() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'alc_ash' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearAlcAsh() {
      alc_ash = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'mgn' field.
      * @return The value.
      */
    public java.lang.Double getMgn() {
      return mgn;
    }

    /**
      * Sets the value of the 'mgn' field.
      * @param value The value of 'mgn'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setMgn(java.lang.Double value) {
      validate(fields()[6], value);
      this.mgn = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'mgn' field has been set.
      * @return True if the 'mgn' field has been set, false otherwise.
      */
    public boolean hasMgn() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'mgn' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearMgn() {
      mgn = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 't_phenols' field.
      * @return The value.
      */
    public java.lang.Double getTPhenols() {
      return t_phenols;
    }

    /**
      * Sets the value of the 't_phenols' field.
      * @param value The value of 't_phenols'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setTPhenols(java.lang.Double value) {
      validate(fields()[7], value);
      this.t_phenols = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 't_phenols' field has been set.
      * @return True if the 't_phenols' field has been set, false otherwise.
      */
    public boolean hasTPhenols() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 't_phenols' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearTPhenols() {
      t_phenols = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'flav' field.
      * @return The value.
      */
    public java.lang.Double getFlav() {
      return flav;
    }

    /**
      * Sets the value of the 'flav' field.
      * @param value The value of 'flav'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setFlav(java.lang.Double value) {
      validate(fields()[8], value);
      this.flav = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'flav' field has been set.
      * @return True if the 'flav' field has been set, false otherwise.
      */
    public boolean hasFlav() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'flav' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearFlav() {
      flav = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonflav_phenols' field.
      * @return The value.
      */
    public java.lang.Double getNonflavPhenols() {
      return nonflav_phenols;
    }

    /**
      * Sets the value of the 'nonflav_phenols' field.
      * @param value The value of 'nonflav_phenols'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setNonflavPhenols(java.lang.Double value) {
      validate(fields()[9], value);
      this.nonflav_phenols = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'nonflav_phenols' field has been set.
      * @return True if the 'nonflav_phenols' field has been set, false otherwise.
      */
    public boolean hasNonflavPhenols() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'nonflav_phenols' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearNonflavPhenols() {
      nonflav_phenols = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'proant' field.
      * @return The value.
      */
    public java.lang.Double getProant() {
      return proant;
    }

    /**
      * Sets the value of the 'proant' field.
      * @param value The value of 'proant'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setProant(java.lang.Double value) {
      validate(fields()[10], value);
      this.proant = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'proant' field has been set.
      * @return True if the 'proant' field has been set, false otherwise.
      */
    public boolean hasProant() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'proant' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearProant() {
      proant = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'col' field.
      * @return The value.
      */
    public java.lang.Double getCol() {
      return col;
    }

    /**
      * Sets the value of the 'col' field.
      * @param value The value of 'col'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setCol(java.lang.Double value) {
      validate(fields()[11], value);
      this.col = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'col' field has been set.
      * @return True if the 'col' field has been set, false otherwise.
      */
    public boolean hasCol() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'col' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearCol() {
      col = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'hue' field.
      * @return The value.
      */
    public java.lang.Double getHue() {
      return hue;
    }

    /**
      * Sets the value of the 'hue' field.
      * @param value The value of 'hue'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setHue(java.lang.Double value) {
      validate(fields()[12], value);
      this.hue = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'hue' field has been set.
      * @return True if the 'hue' field has been set, false otherwise.
      */
    public boolean hasHue() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'hue' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearHue() {
      hue = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'od280od315' field.
      * @return The value.
      */
    public java.lang.Double getOd280od315() {
      return od280od315;
    }

    /**
      * Sets the value of the 'od280od315' field.
      * @param value The value of 'od280od315'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setOd280od315(java.lang.Double value) {
      validate(fields()[13], value);
      this.od280od315 = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'od280od315' field has been set.
      * @return True if the 'od280od315' field has been set, false otherwise.
      */
    public boolean hasOd280od315() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'od280od315' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearOd280od315() {
      od280od315 = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'proline' field.
      * @return The value.
      */
    public java.lang.Double getProline() {
      return proline;
    }

    /**
      * Sets the value of the 'proline' field.
      * @param value The value of 'proline'.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder setProline(java.lang.Double value) {
      validate(fields()[14], value);
      this.proline = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'proline' field has been set.
      * @return True if the 'proline' field has been set, false otherwise.
      */
    public boolean hasProline() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'proline' field.
      * @return This builder.
      */
    public wineinfo.avro.WineInfo.Builder clearProline() {
      proline = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    //@Override
    @SuppressWarnings("unchecked")
    public WineInfo build() {
      try {
        WineInfo record = new WineInfo();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.region = fieldSetFlags()[1] ? this.region : (java.lang.Integer) defaultValue(fields()[1]);
        record.alc = fieldSetFlags()[2] ? this.alc : (java.lang.Double) defaultValue(fields()[2]);
        record.m_acid = fieldSetFlags()[3] ? this.m_acid : (java.lang.Double) defaultValue(fields()[3]);
        record.ash = fieldSetFlags()[4] ? this.ash : (java.lang.Double) defaultValue(fields()[4]);
        record.alc_ash = fieldSetFlags()[5] ? this.alc_ash : (java.lang.Double) defaultValue(fields()[5]);
        record.mgn = fieldSetFlags()[6] ? this.mgn : (java.lang.Double) defaultValue(fields()[6]);
        record.t_phenols = fieldSetFlags()[7] ? this.t_phenols : (java.lang.Double) defaultValue(fields()[7]);
        record.flav = fieldSetFlags()[8] ? this.flav : (java.lang.Double) defaultValue(fields()[8]);
        record.nonflav_phenols = fieldSetFlags()[9] ? this.nonflav_phenols : (java.lang.Double) defaultValue(fields()[9]);
        record.proant = fieldSetFlags()[10] ? this.proant : (java.lang.Double) defaultValue(fields()[10]);
        record.col = fieldSetFlags()[11] ? this.col : (java.lang.Double) defaultValue(fields()[11]);
        record.hue = fieldSetFlags()[12] ? this.hue : (java.lang.Double) defaultValue(fields()[12]);
        record.od280od315 = fieldSetFlags()[13] ? this.od280od315 : (java.lang.Double) defaultValue(fields()[13]);
        record.proline = fieldSetFlags()[14] ? this.proline : (java.lang.Double) defaultValue(fields()[14]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WineInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<WineInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WineInfo>
    READER$ = (org.apache.avro.io.DatumReader<WineInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
